"$schema" = "https://jj-vcs.github.io/jj/latest/config-schema.json"

[aliases]
# Convenient shorthands.
b = ["fuzzy_bookmark"]
ba = ["bookmark", "list", "-a"]
co = ["checkout"]
d = ["diff"]
s = ["status"]
l = ["log", "-r", "(trunk()..@):: | (trunk()..@)-"]
ll = ["log", "-T", "builtin_log_detailed"]

fetch = ["git", "fetch"]
name = ["bookmark", "set", "-r", "closest_pushable(@)"]

# Get all open stacks of work.
open = ["log", "-r", "open()"]

# Show the current stack
stack = ["log", "-r", "stack()"]

# Better name, IMO.
credit = ["file", "annotate"]

# Retrunk a series. Typically used as `jj retrunk -s ...`, and notably can be
# used with open:
# - jj retrunk -s 'all:roots(open())'
retrunk = ["rebase", "-d", "trunk()"]

# Retrunk the current stack of work.
reheat = ["rebase", "-d", "trunk()", "-s", "all:roots(trunk()..stack(@))"]

# Eject content from @ into any other change.
# - jj eject xyz --interactive
eject = ["squash", "--from", "@", "--into"]

# Take content from any change, and move it into @.
# - jj consume xyz path/to/file`
consume = ["squash", "--into", "@", "--from"]

# Bring the closest bookmark up to the closest pushable change
tug = ["util", "exec", "--", "sh", "-c", """
if [ "x$1" = "x" ]; then
  jj bookmark move --from "closest_bookmark(@)" --to "closest_pushable(@)"
else
  jj bookmark move --to "closest_pushable(@)" "$@"
fi
""", ""]

# list or jump to bookmarks
fuzzy_bookmark = ["util", "exec", "--", "sh", "-c", """
if [ "x$1" = "x" ]; then
  jj bookmark list
else
  jj bookmark list -a -T 'separate("@", name, remote) ++ "\n"' 2> /dev/null | sort | uniq | fzf -f "$1" | head -n1 | xargs jj new
fi
""", ""]

# colocate with git and track origin's branches
init = ["util", "exec", "--", "bash", "-c", """
jj git init --colocate
# only track origin branches, not upstream or others
jj bookmark track 'glob:*@origin'
"""]

# track the remote branch and new on top of it
checkout = ["util", "exec", "--", "bash", "-c", """
  jj bookmark track ${@}@origin
  jj new $@
""", ""]

# tug the closest bookmark, push it, and track it
push = ["util", "exec", "--", "bash", "-c", """
tuggable="$(jj log -r 'closest_bookmark(@)..closest_pushable(@)' -T '"n"' --no-graph)"
[[ -n "$tuggable" ]] && jj tug
pushable="$(jj log -r 'remote_bookmarks(remote=origin)..@' -T 'bookmarks' --no-graph)"
[[ -n "$pushable" ]] && jj git push || echo "Nothing to push."
closest="$(jj log -r 'closest_bookmark(@)' -n 1 -T 'bookmarks' --no-graph | cut -d ' ' -f 1)"
closest="${closest%\\*}"
tracked="$(jj bookmark list -r ${closest} -t -T 'if(remote == "origin", name)')"
[[ "$tracked" == "$closest" ]] || jj bookmark track "${closest}@origin"
"""]

# update from remote and rebase onto the latest
pull = ["util", "exec", "--", "bash", "-c", """
closest="$(jj log -r 'closest_bookmark(@)' -n 1 -T 'bookmarks' --no-graph | cut -d ' ' -f 1)"
closest="${closest%\\*}"
jj git fetch
jj log -n 1 -r "${closest}" 2>&1 > /dev/null && jj rebase -d "${closest}" || jj rebase -d 'trunk()'
jj log -r 'stack()'
"""]

# create a pull request using `gh` for closest_bookmark(@)
pr = ["util", "exec", "--", "bash", "-c", """
gh pr create --head $(jj log -r 'closest_bookmark(@)' -T 'bookmarks' --no-graph | cut -d ' ' -f 1)
"""]

# create a pull request from the last change and try to automatically merge it
prl = ["util", "exec", "--", "bash", "-c", """
branch="$(jj log -r 'closest_bookmark(@)' -T 'bookmarks' --no-graph | cut -d ' ' -f 1)"
branch="${branch%\\*}"
title="$(jj log -r $branch -T 'description_title' --no-graph)"
body="$(jj log -r $branch -T 'description_body' --no-graph)"
gh pr create --head "$branch" --title "$title" --body "$body" && gh pr merge $branch --auto --merge
"""]

[revset-aliases]
'closest_bookmark(to)' = 'heads(::to & bookmarks())'
'closest_pushable(to)' = 'heads(::to & mutable() & ~description(exact:"") & (~empty() | merges()))'

'user(x)' = 'author(x) | committer(x)'

# Private and WIP commits that should never be pushed anywhere.
'wip()' = 'description(glob:"wip:*")'
'private()' = 'description(glob:"private:*")'
'unready()' = 'wip() | private()'

# stack(x, n) is the set of mutable commits reachable from 'x', with 'n'
# parents. 'n' is often useful to customize the display and return set for
# certain operations. 'x' can be used to target the set of 'roots' to traverse,
# e.g. @ is the current stack.
'stack()' = 'ancestors(reachable(@, mutable()), 2)'
'stack(x)' = 'ancestors(reachable(x, mutable()), 2)'
'stack(x, n)' = 'ancestors(reachable(x, mutable()), n)'

# The current set of "open" works. It is defined as:
#
# - given the set of commits not in trunk, that are written by me,
# - calculate the given stack() for each of those commits
#
# n = 1, meaning that nothing from `trunk()` is included, so all resulting
# commits are mutable by definition.
'open()' = 'stack(trunk().. & mine(), 1)'

# the set of 'ready()' commits. defined as the set of open commits, but nothing
# that is blacklisted or any of their children.
'ready()' = 'open() ~ unready()::'

[git]
push-new-bookmarks = true

[[--scope]]
--when.commands = ["diff", "show"]

[--scope.ui]
# https://github.com/jj-vcs/jj/blob/v0.25.0/docs/config.md#processing-contents-to-be-paged
pager = "delta"
# NOTE: this is required when using `delta` as a pager
diff-formatter = ":git"

[user]
name = "Andr√© Arko"
email = "andre@arko.net"

[ui]
editor = ["mvim", "-f", "--nomru", "-c", "au VimLeave * !open -b $__CFBundleIdentifier"]
diff-editor = ":builtin"

[templates]
description_title = 'description.first_line().trim_end()'
description_body = 'description.remove_prefix(description.first_line()).trim_start()'
draft_commit_description = '''
  concat(
    coalesce(description, default_commit_description, "\n"),
    surround(
      "\nJJ: This commit contains the following changes:\n", "",
      indent("JJ:     ", diff.stat(72)),
    ),
    "\nJJ: ignore-rest\n",
    diff.git(),
  )
'''
